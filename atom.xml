<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Just Do IT]]></title>
  <subtitle><![CDATA[record]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://diary.printf.me//"/>
  <updated>2015-06-08T07:51:28.877Z</updated>
  <id>http://diary.printf.me//</id>
  
  <author>
    <name><![CDATA[zhiyue]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[使用Docker部署IPython]]></title>
    <link href="http://diary.printf.me/2015/06/08/2015-06-08-your-filename/"/>
    <id>http://diary.printf.me/2015/06/08/2015-06-08-your-filename/</id>
    <published>2015-06-08T16:21:56.000Z</published>
    <updated>2015-06-08T07:51:28.877Z</updated>
    <content type="html"><![CDATA[<p><img src="http://zhiyue.qiniudn.com/15-6-8/63734849.jpg" alt="docker"><br><a id="more"></a></p>
<blockquote>
<p>本文的部署环境是Ubuntu 14.04 </p>
</blockquote>
<ul>
<li><p>Docker</p>
<blockquote>
<p>Docker 详细概念可以去search，简单来说就是把应用打包到一个容器里的轻量级系统虚拟化服务</p>
</blockquote>
</li>
<li><p>IPython Notebook</p>
<blockquote>
<p>IPython Notebook 既是一个交互计算平台，又是一个记录计算过程的「笔记本」。它由服务端和客户端两部分组成，其中服务端负责代码的解释与计算，而客户端负责与用户进行交互。 服务端可以运行在本机也可以运行在远程服务器，包含负责运算的 IPython kernel (与 QT Console 的 kernel 相同) 以及一个 HTTP/S 服务器 (Tornado)。 而客户端则是一个指向服务端地址的浏览器页面，负责接受用户的输入并负责渲染输出。</p>
</blockquote>
</li>
</ul>
<p>本文主要记录使用Docker 在服务器部署IPython Note 应用的过程。比传统的部署方案果然简单轻松不少。</p>
<h4 id="知识点">知识点</h4><ol>
<li>Docker 的基本概念</li>
<li>部署IPython 容器</li>
<li>使用Nginx 容器反向代理IPython </li>
</ol>
<h3 id="Docker_的基本概念">Docker 的基本概念</h3><p>下文的操作主要涉及Docker的一下几个知识点：</p>
<ul>
<li>Docker 的镜像(image)、容器(container)、仓库(registerie)</li>
<li>Docker 的安装</li>
<li>Docker 的基础用法</li>
<li>Docker的端口映射</li>
<li>Docker 数据卷</li>
<li>链接容器</li>
</ul>
<p>详细的信息可以自行搜索</p>
<h3 id="部署IPython">部署IPython</h3><h4 id="下载IPython_的镜像">下载IPython 的镜像</h4><p>官方Docker镜像<a href="https://registry.hub.docker.com/repos/ipython/" target="_blank" rel="external">地址</a>，里面包含5个镜像:</p>
<ul>
<li>notebook</li>
<li>ipython</li>
<li>scipyserver</li>
<li>scipystack</li>
<li>nbvierer</li>
</ul>
<p>简单说一下这几个镜像的区别 <code>ipython</code> 是以上几个镜像的共同的根镜像。<code>notebook</code> 提供了一个web的前端。<code>scipystack</code>在<code>ipython</code>的基础上安装了许多科学计算的包(cython,h5py,matplotlib,numpy,pandas,patsy,scikit-learn,scipy,seaborn,sympy,yt)，而<code>scipyserver</code>则在<code>scipystack</code>的基础上提供了web的前端。<code>nbviewer</code>则是<a href="nbviewer.ipython.org">nbviewer.ipython.org</a>的实现<br>更多详细信息请到GitHub上的<a href="https://github.com/ipython/docker-notebook" target="_blank" rel="external">docker-notebook</a> 查看<br>选择<code>scipystack</code>镜像最省事，但是需要下载的东西也越多。下文选择的也是<code>scipystack</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker pull ipython/scipyserver</span><br></pre></td></tr></table></figure></p>
<h4 id="运行IPython_容器">运行IPython 容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name IPythonApp -p 8888:8888 -e &#34;PASSWORD=your password&#34; -e &#34;USE_HTTP=1&#34; -v /home/zhiyue/repos/ipython-notebook:/notebooks ipython/scipyserver</span><br></pre></td></tr></table></figure>
<p>解析一下参数<code>-d</code> 是以后台的方式运行，<code>--name</code> 是容器的别名，<code>-p</code> 是端口映射，<code>-e</code> 是设置环境变量，这里的环境变量<code>PASSWORD</code>设置成你自己的密码就可以了，<code>USE_HTTP=1</code> 意思是使用http，<code>-v</code> 是设置数据卷，把宿主机的目录挂载到容器里，即使容器被删除，数据也可以保留下来</p>
<h3 id="Nginx_反向代理_IPython">Nginx 反向代理 IPython</h3><p>有两种方式，一种是使用官方的Nginx，另一种是使用<a href="https://registry.hub.docker.com/u/jwilder/nginx-proxy/" target="_blank" rel="external">jwilder / nginx-proxy</a>，后一种方法更加简单和方便</p>
<h4 id="方式1：nginx">方式1：nginx</h4><ul>
<li><p>使用Nginx的官方镜像<a href="https://registry.hub.docker.com/_/nginx/" target="_blank" rel="external">nginx</a></p>
</li>
<li><p>Nginx 配置文件<br><code>ipython-server.conf</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> &#10; map $http_upgrade $connection_upgrade &#123;&#10;        default upgrade;&#10;        &#39;&#39;      close;&#10; &#125;&#10; &#10;server&#123;&#10;        listen 80;&#10;        server_name note.everforget.com;&#10;        location / &#123;&#10;                proxy_pass http://ipython:8888;&#10;                proxy_http_version 1.1;&#10;                proxy_set_header Upgrade $http_upgrade;&#10;                proxy_set_header Connection &#34;upgrade&#34;;&#10;                proxy_set_header X-Real-IP $remote_addr;&#10;                proxy_set_header Host $host;&#10;                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#10;        &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>这里面要注意一点是，ipython要使用websock因此要配置websocket，之前在这个问题查了好久。<br><code>proxy_pass http://ipython:8888;</code> <code>ipython</code>和后面容器连接时的别名有关。</p>
<ul>
<li>运行Nginx容器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d -p 80:80 --name nginx --link IPythonApp:ipython  -v `pwd`/config:/etc/nginx/conf.d  -v `pwd`/logs:/var/log/nginx nginx</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="方式2：nginx-proxy">方式2：nginx-proxy</h4><ul>
<li><p><a href="https://registry.hub.docker.com/u/jwilder/nginx-proxy/" target="_blank" rel="external">jwilder / nginx-proxy</a></p>
</li>
<li><p>运行nginx-proxy 容器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>运行ipython 容器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d -e &#34;VIRTUAL_HOST=ipython.everforget.com&#34; --name IPython -p 8888:8888 -e &#34;PASSWORD=xxxxxx&#34; -e &#34;USE_HTTP=1&#34; -v /home/zhiyue/repos/ipython-notebook:/notebooks ipython/scipyserver</span><br></pre></td></tr></table></figure>
<p>最后放一张图：</p>
<p><img src="http://zhiyue.qiniudn.com/15-6-8/23580903.jpg" alt=""></p>
<p>这样就可以随时通过web来使用python了。</p>
<h3 id="参考">参考</h3><ul>
<li><p><a href="http://blog.opskumu.com/docker.html" target="_blank" rel="external">Docker 笔记 By 枯木</a></p>
</li>
<li><p><a href="http://godleon.github.io/blog/2014/11/23/use-docker-to-rapidly-create-ipython-notebook-environments/" target="_blank" rel="external">[Docker] 快速建立 IPython Notebook 環境</a></p>
</li>
<li><a href="http://blog.shiqichan.com/Deploying-Nginx-with-Docker/" target="_blank" rel="external">在Docker下部署Nginx</a></li>
<li><a href="http://mindonmind.github.io/2013/02/08/ipython-notebook-interactive-computing-new-era/" target="_blank" rel="external">IPython Notebook: 交互计算新时代</a></li>
</ul>
<hr>
<p>更新日志：</p>
<ul>
<li>2015-6-8 添加配图</li>
<li>2015-6-6 第一次撰写</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://zhiyue.qiniudn.com/15-6-8/63734849.jpg" alt="docker"><br>]]>
    
    </summary>
    
      <category term="Docker" scheme="http://diary.printf.me/tags/Docker/"/>
    
      <category term="IPyhton" scheme="http://diary.printf.me/tags/IPyhton/"/>
    
      <category term="nginx，Python" scheme="http://diary.printf.me/tags/nginx%EF%BC%8CPython/"/>
    
      <category term="系统运维" scheme="http://diary.printf.me/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://diary.printf.me/2015/06/08/hello-world/"/>
    <id>http://diary.printf.me/2015/06/08/hello-world/</id>
    <published>2015-06-08T07:51:28.877Z</published>
    <updated>2015-06-08T07:51:28.877Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>